# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BHeyvVaQ6m5kDg-nXbhBMjITPFsduvLq
"""

pip install sc2reader

import sc2reader
import pickle
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sc2reader.factories import SC2Factory
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import MultiLabelBinarizer

replays = sc2reader.load_replays('/content', load_map=True)
sc2 = SC2Factory()
RacePlayer1=""
UnitsOfPlayer1 = []
TimeOfUnitBirth1 = []
TimeOfUnitDeath1 = []
DidPlayer1Won=0

RacePlayer2=""
UnitsOfPlayer2 = []
TimeOfUnitBirth2 = []
TimeOfUnitDeath2 = []
DidPlayer2Won=0

all_Player1Race = []
all_Player2Race = []
all_UnitsOfPlayer1 = []
all_UnitsOfPlayer2 = []
all_TimeOfUnitBirth1 = []
all_TimeOfUnitBirth2 = []
all_TimeOfUnitDeath1 = []
all_TimeOfUnitDeath2 = []
all_DidPlayer1Won = []
all_DidPlayer2Won = []

def get_units_with_details_at_time(replay, player_id, target_time):
    units = set()
    unit_details = {}  # To store the creation time, location, and death time of units

    for event in replay.events:
        if hasattr(event, 'second') and event.second > target_time:
            break
        if event.name == 'UnitBornEvent' and event.control_pid == player_id:
            units.add(event.unit)
            unit_details[event.unit] = {
                'born': event.second,
                'location': event.location,
                'died': None
            }
        elif event.name == 'UnitDiedEvent' and event.unit in units:
            units.remove(event.unit)
            if event.unit in unit_details:
                unit_details[event.unit]['died'] = event.second

    return units, unit_details

# Function to format seconds into minutes and seconds
def format_time(seconds):
    minutes = seconds // 60
    seconds = seconds % 60
    return f"{minutes}m {seconds}s"





from google.colab import drive
drive.mount('/content/drive')

model_path = '/content/drive/MyDrive/models/model.pkl'
with open(model_path, 'rb') as file:
    model = pickle.load(file)

replay=sc2reader.load_replay('/content/20231109 - Game 2 - ShoWTimE vs goblin - PvP - Oceanborn.SC2Replay')

all_Player1Race = []
  all_Player2Race = []
  all_UnitsOfPlayer1 = []
  all_UnitsOfPlayer2 = []
  all_TimeOfUnitBirth1 = []
  all_TimeOfUnitBirth2 = []
  all_TimeOfUnitDeath1 = []
  all_TimeOfUnitDeath2 = []
  all_DidPlayer1Won = []
  all_DidPlayer2Won = []
  RacePlayer1 = ""
  UnitsOfPlayer1 = []
  TimeOfUnitBirth1 = []
  TimeOfUnitDeath1 = []
  DidPlayer1Won = 0

  RacePlayer2 = ""
  UnitsOfPlayer2 = []
  TimeOfUnitBirth2 = []
  TimeOfUnitDeath2 = []
  DidPlayer2Won = 0
  player_id = 1  # Adjust according to the player's ID
  RacePlayer1=replay.players[player_id-1].pick_race
  target_time = replay.game_length.seconds  # Time in seconds (e.g., 10 minutes)
  player_units, unit_details = get_units_with_details_at_time(replay, player_id, target_time)
  for unit, details in unit_details.items():
      creation_time = format_time(details['born'])
      death_time = format_time(details['died']) if details['died'] else 'still alive'
      location = details['location']
      if not unit.name.startswith('Beacon'):
        #print(f'{unit.name} created at {creation_time} at location {location}, died at {death_time}')
        UnitsOfPlayer1.append(unit.name)
        TimeOfUnitBirth1.append(creation_time)
        TimeOfUnitDeath1.append(death_time)
  player_id = 2  # Adjust according to the player's ID
  RacePlayer2=replay.players[player_id-1].pick_race
  player_units, unit_details = get_units_with_details_at_time(replay, player_id, target_time)
  for unit, details in unit_details.items():
      creation_time = format_time(details['born'])
      death_time = format_time(details['died']) if details['died'] else 'still alive'
      location = details['location']
      if not unit.name.startswith('Beacon'):
        #print(f'{unit.name} created at {creation_time} at location {location}, died at {death_time}')
        UnitsOfPlayer2.append(unit.name)
        TimeOfUnitBirth2.append(creation_time)
        TimeOfUnitDeath2.append(death_time)
  if replay.players[player_id-1].name==replay.winner.players[0].name:
    DidPlayer2Won=1
    DidPlayer1Won = 0
  else:
    DidPlayer1Won=1
    DidPlayer2Won = 0
  all_UnitsOfPlayer1 += UnitsOfPlayer1
  all_UnitsOfPlayer1.append('PRZERYWNIK')
  all_UnitsOfPlayer2 += UnitsOfPlayer2
  all_UnitsOfPlayer2.append('PRZERYWNIK')
  all_TimeOfUnitBirth1 += TimeOfUnitBirth1
  all_TimeOfUnitBirth1.append('PRZERYWNIK')
  all_TimeOfUnitBirth2 += TimeOfUnitBirth2
  all_TimeOfUnitBirth2.append('PRZERYWNIK')
  all_TimeOfUnitDeath1 += TimeOfUnitDeath1
  all_TimeOfUnitDeath1.append('PRZERYWNIK')
  all_TimeOfUnitDeath2 += TimeOfUnitDeath2
  all_TimeOfUnitDeath2.append('PRZERYWNIK')
  all_Player1Race.append(RacePlayer1)
  all_Player2Race.append(RacePlayer2)
  all_DidPlayer1Won.append(DidPlayer1Won)
  all_DidPlayer2Won.append(DidPlayer2Won)

data = []
unitcount=0
current_match = 0  # Zmienna przechowująca numer aktualnego meczu
  # Łączenie danych z graczem 1
for i in range(len(all_UnitsOfPlayer1)):
    if all_UnitsOfPlayer1[i] == "PRZERYWNIK":
        current_match += 1  # Inkrementacja numeru meczu po napotkaniu "PRZERYWNIK"
        continue  # Przechodzimy do kolejnego elementu, nie dodając aktualnego do danych
    data.append(
          {'Match': current_match, 'Player': 1, 'Unit': all_UnitsOfPlayer1[i], 'BirthTime': all_TimeOfUnitBirth1[i],'DeathTime': all_TimeOfUnitDeath1[i], 'Race': all_Player1Race[current_match],'Winner': all_DidPlayer1Won[current_match]})
    unitcount+=1
current_match = 0
  # Łączenie danych z graczem 2
for i in range(len(all_UnitsOfPlayer2)):
    if all_UnitsOfPlayer2[i] == "PRZERYWNIK":
        current_match += 1  # Inkrementacja numeru meczu po napotkaniu "PRZERYWNIK"
        continue  # Przechodzimy do kolejnego elementu, nie dodając aktualnego do danych
    data.append({'Match': current_match, 'Player': 2, 'Unit': all_UnitsOfPlayer2[i], 'BirthTime': all_TimeOfUnitBirth2[i],'DeathTime': all_TimeOfUnitDeath2[i], 'Race': all_Player2Race[current_match],'Winner': all_DidPlayer2Won[current_match]})
df = pd.DataFrame(data)
  # Przetwarzanie cech (np. przekształcenie czasu na liczby)
df['BirthTime'] = pd.to_timedelta(df['BirthTime']).dt.total_seconds()
df['DeathTime'] = df['DeathTime'].replace('still alive', pd.NA)
df['DeathTime'] = pd.to_timedelta(df['DeathTime'].fillna('0m 0s')).dt.total_seconds()
label_encoder = LabelEncoder()
df['Unit'] = label_encoder.fit_transform(df['Unit'])
df['Race'] = label_encoder.fit_transform(df['Race'])
  # Wyświetlenie ramki danych
X = df.drop(['Winner'], axis=1)
print(X)



#print(X)
print(replay.winner)
sumofyes1=0
sumofyes2=0
sumofno1=0
sumofno2=0
j=0
i=0
probabilities = model.predict_proba(X)
for  p,(proba_no,proba_yes) in enumerate(probabilities):
    if i<=unitcount:
      sumofyes1+=proba_yes
      sumofno1+=proba_no
    else:
      j+=1
      sumofyes2+=proba_yes
      sumofno2+=proba_no
    i+=1
sumofyes1=sumofyes1/unitcount
sumofyes2=sumofyes2/j
sumofno1=sumofno1/unitcount
sumofno2=sumofno2/j

y_pred=model.predict(X)
print(y_pred)
# Wyświetlenie prawdopodobieństw

print("Prawdopodobienstwo ze gracz 1 wygral to ",sumofyes1,"Prawdobodobienstwo ze gracz 2 wygral to ",sumofyes2)
print("Prawdopodobienstwo ze gracz 1 przegral to ",sumofno1,"Prawdobodobienstwo ze gracz 2 przegral to ",sumofno2)